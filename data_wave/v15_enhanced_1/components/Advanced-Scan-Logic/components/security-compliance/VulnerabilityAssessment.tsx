/**
 * üõ°Ô∏è Vulnerability Assessment - Advanced Enterprise Vulnerability Management
 * =========================================================================
 * 
 * Enterprise-grade vulnerability assessment platform that provides comprehensive
 * vulnerability detection, CVSS scoring, risk analysis, and remediation management
 * across multiple data sources and environments.
 * 
 * Features:
 * - Comprehensive vulnerability detection and classification
 * - CVSS 3.1/4.0 scoring and risk assessment
 * - Advanced vulnerability prioritization and triage
 * - Integration with CVE databases and threat intelligence
 * - Automated remediation recommendations and tracking
 * - Executive dashboards and detailed reporting
 * - False positive management and suppression
 * - Compliance mapping and regulatory alignment
 * 
 * Backend Integration:
 * - VulnerabilityService for comprehensive vulnerability operations
 * - CVSSService for accurate scoring and risk calculation
 * - ThreatIntelligenceService for contextual threat data
 * - Real-time vulnerability feeds and updates
 * 
 * @author Enterprise Data Governance Team
 * @version 1.0.0 - Production Ready
 */

import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardHeader, 
  CardTitle 
} from '@/components/ui/card';
import { 
  Tabs, 
  TabsContent, 
  TabsList, 
  TabsTrigger 
} from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import { Separator } from '@/components/ui/separator';
import { ScrollArea } from '@/components/ui/scroll-area';
import { 
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { 
  Shield,
  ShieldAlert,
  ShieldCheck,
  ShieldX,
  Bug,
  Skull,
  AlertTriangle,
  CheckCircle,
  XCircle,
  Clock,
  Zap,
  Target,
  Activity,
  TrendingUp,
  TrendingDown,
  BarChart3,
  PieChart,
  LineChart,
  Users,
  Lock,
  Unlock,
  Key,
  FileText,
  Download,
  Upload,
  Search,
  Filter,
  SortAsc,
  SortDesc,
  MoreHorizontal,
  Plus,
  Minus,
  Edit,
  Trash2,
  Copy,
  ExternalLink,
  Mail,
  Bell,
  BellOff,
  Cpu,
  Database,
  Network,
  Server,
  Cloud,
  Globe,
  Wifi,
  WifiOff,
  Calendar,
  ClipboardCheck,
  BookOpen,
  Award,
  AlertCircle,
  Info,
  HelpCircle,
  Star,
  Bookmark,
  Flag,
  MessageSquare,
  Archive,
  Folder,
  FolderOpen,
  History,
  Timer,
  Gauge,
  Layers,
  Workflow,
  Eye,
  EyeOff,
  RefreshCw,
  Settings,
  Play,
  Pause,
  Square
} from 'lucide-react';
import { useToast } from '@/components/ui/use-toast';
import { cn } from '@/lib/utils';
import { useSecurityCompliance } from '../../hooks/useSecurityCompliance';

// ==================== Types and Interfaces ====================

interface Vulnerability {
  id: string;
  cveId?: string;
  title: string;
  description: string;
  severity: VulnerabilitySeverity;
  category: string;
  
  // CVSS Information
  cvssScore: number;
  cvssVector: string;
  cvssVersion: '3.1' | '4.0';
  baseScore: number;
  temporalScore?: number;
  environmentalScore?: number;
  
  // Risk Assessment
  riskScore: number;
  riskLevel: 'low' | 'medium' | 'high' | 'critical';
  businessImpact: BusinessImpact;
  exploitability: ExploitabilityInfo;
  
  // Location and Context
  location: VulnerabilityLocation;
  affectedAssets: AffectedAsset[];
  affectedComponents: string[];
  
  // Remediation
  remediation: RemediationInfo;
  patchInfo: PatchInfo;
  workarounds: string[];
  
  // Status and Management
  status: VulnerabilityStatus;
  assignedTo?: string;
  priority: 'low' | 'medium' | 'high' | 'critical';
  tags: string[];
  
  // Intelligence
  threatIntelligence: ThreatIntelligenceInfo;
  exploitAvailable: boolean;
  activelyExploited: boolean;
  
  // Compliance
  complianceImpact: ComplianceImpact[];
  regulatoryMapping: RegulatoryMapping[];
  
  // Metadata
  discoveredAt: string;
  lastSeenAt: string;
  firstSeenAt: string;
  createdAt: string;
  updatedAt: string;
  createdBy: string;
  
  // Tracking
  occurrences: number;
  falsePositive: boolean;
  suppressionReason?: string;
  suppressedBy?: string;
  suppressedAt?: string;
  
  // Evidence
  evidence: Evidence[];
  references: Reference[];
  
  // Metrics
  timeToDetection: number;
  timeToRemediation?: number;
  remediationEffort: 'low' | 'medium' | 'high';
}

enum VulnerabilitySeverity {
  NONE = 'none',
  LOW = 'low',
  MEDIUM = 'medium',
  HIGH = 'high',
  CRITICAL = 'critical'
}

enum VulnerabilityStatus {
  NEW = 'new',
  CONFIRMED = 'confirmed',
  IN_PROGRESS = 'in_progress',
  RESOLVED = 'resolved',
  FALSE_POSITIVE = 'false_positive',
  SUPPRESSED = 'suppressed',
  WONT_FIX = 'wont_fix',
  DUPLICATE = 'duplicate'
}

interface VulnerabilityLocation {
  assetId: string;
  assetName: string;
  assetType: string;
  environment: string;
  
  // Technical Details
  hostname?: string;
  ipAddress?: string;
  port?: number;
  service?: string;
  path?: string;
  
  // Application Context
  applicationName?: string;
  componentName?: string;
  version?: string;
  
  // Cloud Context
  cloudProvider?: string;
  region?: string;
  accountId?: string;
  resourceId?: string;
}

interface AffectedAsset {
  id: string;
  name: string;
  type: string;
  criticality: 'low' | 'medium' | 'high' | 'critical';
  businessValue: number;
  exposureLevel: 'internal' | 'external' | 'public';
  
  // Dependencies
  dependencies: string[];
  dependents: string[];
}

interface BusinessImpact {
  confidentialityImpact: 'none' | 'low' | 'high';
  integrityImpact: 'none' | 'low' | 'high';
  availabilityImpact: 'none' | 'low' | 'high';
  
  // Business Context
  businessCriticality: 'low' | 'medium' | 'high' | 'critical';
  dataClassification: string[];
  affectedUsers: number;
  revenueImpact: number;
  
  // Operational Impact
  downtimeRisk: 'low' | 'medium' | 'high';
  performanceImpact: 'none' | 'low' | 'medium' | 'high';
  scalabilityImpact: 'none' | 'low' | 'medium' | 'high';
}

interface ExploitabilityInfo {
  attackVector: 'network' | 'adjacent' | 'local' | 'physical';
  attackComplexity: 'low' | 'high';
  privilegesRequired: 'none' | 'low' | 'high';
  userInteraction: 'none' | 'required';
  
  // Exploit Intelligence
  exploitMaturity: 'unproven' | 'proof_of_concept' | 'functional' | 'high';
  exploitAvailability: boolean;
  exploitPubliclyAvailable: boolean;
  weaponized: boolean;
  
  // Threat Actor Intelligence
  threatActors: string[];
  campaignAssociation: string[];
  targetedAttacks: boolean;
}

interface RemediationInfo {
  type: 'patch' | 'configuration' | 'workaround' | 'mitigation' | 'upgrade';
  description: string;
  instructions: string[];
  effort: 'low' | 'medium' | 'high';
  riskLevel: 'low' | 'medium' | 'high';
  
  // Timing
  estimatedTime: number; // hours
  downtime: number; // hours
  testingRequired: boolean;
  
  // Resources
  skillsRequired: string[];
  toolsRequired: string[];
  dependencies: string[];
  
  // Validation
  validationSteps: string[];
  rollbackPlan: string[];
  
  // Automation
  automatable: boolean;
  automationScript?: string;
  automationTested: boolean;
}

interface PatchInfo {
  available: boolean;
  patchId?: string;
  version?: string;
  releaseDate?: string;
  vendor: string;
  
  // Patch Details
  patchType: 'security' | 'critical' | 'recommended' | 'optional';
  compatibility: string[];
  prerequisites: string[];
  
  // Risk Assessment
  patchRisk: 'low' | 'medium' | 'high';
  regressionRisk: 'low' | 'medium' | 'high';
  testingStatus: 'not_tested' | 'testing' | 'tested' | 'approved';
  
  // Deployment
  deploymentMethod: string[];
  automatedDeployment: boolean;
  maintenanceWindow: boolean;
}

interface ThreatIntelligenceInfo {
  threatLevel: 'low' | 'medium' | 'high' | 'critical';
  intelSources: string[];
  lastUpdated: string;
  
  // Threat Context
  campaignTags: string[];
  actorTags: string[];
  malwareFamilies: string[];
  
  // IOCs
  indicators: ThreatIndicator[];
  
  // Attribution
  attribution: Attribution[];
  
  // Timeline
  firstSeen: string;
  lastSeen: string;
  trending: boolean;
}

interface ThreatIndicator {
  type: 'ip' | 'domain' | 'hash' | 'url' | 'email';
  value: string;
  confidence: number;
  source: string;
  lastSeen: string;
}

interface Attribution {
  actor: string;
  confidence: number;
  source: string;
  techniques: string[];
}

interface ComplianceImpact {
  framework: string;
  requirement: string;
  impact: 'low' | 'medium' | 'high' | 'critical';
  finding: string;
  remediation: string;
}

interface RegulatoryMapping {
  regulation: string;
  article: string;
  requirement: string;
  impact: 'low' | 'medium' | 'high' | 'critical';
  penalty: string;
}

interface Evidence {
  type: 'screenshot' | 'log' | 'network_capture' | 'file' | 'code';
  description: string;
  data: string;
  timestamp: string;
  source: string;
}

interface Reference {
  type: 'cve' | 'advisory' | 'blog' | 'paper' | 'tool';
  title: string;
  url: string;
  source: string;
  publishedDate: string;
}

interface VulnerabilityAssessment {
  id: string;
  name: string;
  description: string;
  status: 'pending' | 'running' | 'completed' | 'failed';
  
  // Configuration
  scope: AssessmentScope;
  methodology: string[];
  tools: string[];
  
  // Results
  vulnerabilities: Vulnerability[];
  summary: AssessmentSummary;
  
  // Execution
  startedAt?: string;
  completedAt?: string;
  duration?: number;
  progress: number;
  
  // Metadata
  createdBy: string;
  createdAt: string;
  updatedAt: string;
  version: string;
}

interface AssessmentScope {
  assets: string[];
  environments: string[];
  scanTypes: string[];
  depth: 'shallow' | 'medium' | 'deep';
}

interface AssessmentSummary {
  totalVulnerabilities: number;
  criticalVulnerabilities: number;
  highVulnerabilities: number;
  mediumVulnerabilities: number;
  lowVulnerabilities: number;
  
  // Risk Metrics
  averageRiskScore: number;
  totalRiskScore: number;
  riskDistribution: Record<string, number>;
  
  // CVSS Metrics
  averageCVSSScore: number;
  cvssDistribution: Record<string, number>;
  
  // Remediation Metrics
  patchableVulnerabilities: number;
  remediationEffort: Record<string, number>;
  
  // Business Impact
  criticalAssetsAffected: number;
  totalAssetsAffected: number;
  complianceImpact: string[];
}

// ==================== Vulnerability Assessment Component ====================

export const VulnerabilityAssessment: React.FC = () => {
  const { toast } = useToast();
  const {
    securityThreats,
    detectThreats,
    loading,
    error,
    refreshSecurityData
  } = useSecurityCompliance({
    autoRefresh: true,
    refreshInterval: 10000,
    enableRealTimeAlerts: true,
    securityLevel: 'enterprise'
  });

  // ==================== State Management ====================

  const [activeTab, setActiveTab] = useState('dashboard');
  const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null);
  const [selectedAssessment, setSelectedAssessment] = useState<VulnerabilityAssessment | null>(null);

  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [assessments, setAssessments] = useState<VulnerabilityAssessment[]>([]);
  const [vulnerabilityMetrics, setVulnerabilityMetrics] = useState<any>(null);

  const [filterSeverity, setFilterSeverity] = useState<string>('all');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [filterAsset, setFilterAsset] = useState<string>('all');
  const [filterEnvironment, setFilterEnvironment] = useState<string>('all');
  const [sortBy, setSortBy] = useState<string>('riskScore');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
  const [searchQuery, setSearchQuery] = useState<string>('');

  const [showVulnDetailsDialog, setShowVulnDetailsDialog] = useState(false);
  const [showCreateAssessmentDialog, setShowCreateAssessmentDialog] = useState(false);
  const [showRemediationDialog, setShowRemediationDialog] = useState(false);
  const [showCVSSCalculatorDialog, setShowCVSSCalculatorDialog] = useState(false);

  const [vulnInProgress, setVulnInProgress] = useState<Record<string, boolean>>({});
  const [realTimeMetrics, setRealTimeMetrics] = useState<any>(null);

  const metricsIntervalRef = useRef<NodeJS.Timeout | null>(null);

  // ==================== Mock Data (Replace with Real API Calls) ====================

  const mockVulnerabilities: Vulnerability[] = useMemo(() => [
    {
      id: 'vuln-001',
      cveId: 'CVE-2024-1234',
      title: 'SQL Injection in Customer Portal Login',
      description: 'A SQL injection vulnerability exists in the customer portal login functionality that allows attackers to bypass authentication and access sensitive customer data.',
      severity: VulnerabilitySeverity.CRITICAL,
      category: 'injection',
      
      cvssScore: 9.8,
      cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',
      cvssVersion: '3.1',
      baseScore: 9.8,
      temporalScore: 8.5,
      environmentalScore: 9.2,
      
      riskScore: 95,
      riskLevel: 'critical',
      businessImpact: {
        confidentialityImpact: 'high',
        integrityImpact: 'high',
        availabilityImpact: 'low',
        businessCriticality: 'critical',
        dataClassification: ['PII', 'Financial'],
        affectedUsers: 50000,
        revenueImpact: 1000000,
        downtimeRisk: 'low',
        performanceImpact: 'none',
        scalabilityImpact: 'none'
      },
      
      location: {
        assetId: 'app-portal-001',
        assetName: 'Customer Portal Application',
        assetType: 'web_application',
        environment: 'production',
        hostname: 'portal.company.com',
        ipAddress: '10.0.1.100',
        port: 443,
        service: 'https',
        path: '/api/auth/login',
        applicationName: 'Customer Portal',
        componentName: 'Authentication Service',
        version: '2.1.4'
      },
      
      affectedAssets: [
        {
          id: 'app-portal-001',
          name: 'Customer Portal Application',
          type: 'web_application',
          criticality: 'critical',
          businessValue: 95,
          exposureLevel: 'public',
          dependencies: ['db-customer-001', 'auth-service-001'],
          dependents: ['mobile-app-001', 'api-gateway-001']
        }
      ],
      affectedComponents: ['Authentication Service', 'Database Layer', 'Session Management'],
      
      remediation: {
        type: 'patch',
        description: 'Apply security patch to fix SQL injection vulnerability',
        instructions: [
          'Update application to version 2.1.5',
          'Restart application services',
          'Verify patch effectiveness with security scan',
          'Monitor application logs for anomalies'
        ],
        effort: 'medium',
        riskLevel: 'low',
        estimatedTime: 4,
        downtime: 1,
        testingRequired: true,
        skillsRequired: ['DevOps', 'Security'],
        toolsRequired: ['Deployment Pipeline', 'Security Scanner'],
        dependencies: ['Maintenance Window'],
        validationSteps: [
          'Verify application starts successfully',
          'Test login functionality',
          'Run security scan',
          'Check application logs'
        ],
        rollbackPlan: [
          'Stop application services',
          'Restore previous version',
          'Restart services',
          'Verify functionality'
        ],
        automatable: true,
        automationScript: 'deploy-security-patch.sh',
        automationTested: true
      },
      
      patchInfo: {
        available: true,
        patchId: 'PATCH-2024-001',
        version: '2.1.5',
        releaseDate: '2024-01-15',
        vendor: 'Internal Development Team',
        patchType: 'security',
        compatibility: ['Linux', 'Docker'],
        prerequisites: ['Database backup', 'Load balancer configuration'],
        patchRisk: 'low',
        regressionRisk: 'low',
        testingStatus: 'tested',
        deploymentMethod: ['Automated Pipeline', 'Rolling Update'],
        automatedDeployment: true,
        maintenanceWindow: false
      },
      
      status: VulnerabilityStatus.CONFIRMED,
      assignedTo: 'security-team@company.com',
      priority: 'critical',
      tags: ['sql-injection', 'authentication', 'customer-data'],
      
      exploitability: {
        attackVector: 'network',
        attackComplexity: 'low',
        privilegesRequired: 'none',
        userInteraction: 'none',
        exploitMaturity: 'functional',
        exploitAvailability: true,
        exploitPubliclyAvailable: true,
        weaponized: false,
        threatActors: ['APT29', 'Lazarus Group'],
        campaignAssociation: ['Operation CloudHopper'],
        targetedAttacks: true
      },
      
      threatIntelligence: {
        threatLevel: 'critical',
        intelSources: ['MITRE ATT&CK', 'NIST NVD', 'Threat Intelligence Platform'],
        lastUpdated: new Date().toISOString(),
        campaignTags: ['credential-harvesting', 'data-exfiltration'],
        actorTags: ['APT', 'nation-state'],
        malwareFamilies: ['Cobalt Strike', 'Mimikatz'],
        indicators: [
          {
            type: 'ip',
            value: '192.168.1.100',
            confidence: 85,
            source: 'Threat Intel Feed',
            lastSeen: new Date().toISOString()
          }
        ],
        attribution: [
          {
            actor: 'APT29',
            confidence: 75,
            source: 'MITRE ATT&CK',
            techniques: ['T1190', 'T1078']
          }
        ],
        firstSeen: new Date(Date.now() - 86400000).toISOString(),
        lastSeen: new Date().toISOString(),
        trending: true
      },
      
      exploitAvailable: true,
      activelyExploited: true,
      
      complianceImpact: [
        {
          framework: 'PCI DSS',
          requirement: '6.5.1',
          impact: 'critical',
          finding: 'Injection vulnerabilities not properly addressed',
          remediation: 'Implement proper input validation and parameterized queries'
        },
        {
          framework: 'SOC 2',
          requirement: 'CC6.1',
          impact: 'high',
          finding: 'Logical and physical access controls insufficient',
          remediation: 'Strengthen authentication mechanisms'
        }
      ],
      
      regulatoryMapping: [
        {
          regulation: 'GDPR',
          article: 'Article 32',
          requirement: 'Security of processing',
          impact: 'critical',
          penalty: 'Up to 4% of annual revenue'
        }
      ],
      
      discoveredAt: new Date(Date.now() - 3600000).toISOString(),
      lastSeenAt: new Date().toISOString(),
      firstSeenAt: new Date(Date.now() - 86400000).toISOString(),
      createdAt: new Date(Date.now() - 3600000).toISOString(),
      updatedAt: new Date().toISOString(),
      createdBy: 'security-scanner@company.com',
      
      occurrences: 1,
      falsePositive: false,
      
      evidence: [
        {
          type: 'screenshot',
          description: 'SQL injection payload execution',
          data: 'base64-encoded-screenshot-data',
          timestamp: new Date().toISOString(),
          source: 'Security Scanner'
        }
      ],
      
      references: [
        {
          type: 'cve',
          title: 'CVE-2024-1234',
          url: 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-1234',
          source: 'MITRE',
          publishedDate: '2024-01-10'
        }
      ],
      
      timeToDetection: 24,
      timeToRemediation: 72,
      remediationEffort: 'medium'
    }
  ], []);

  const mockAssessments: VulnerabilityAssessment[] = useMemo(() => [
    {
      id: 'assessment-001',
      name: 'Q1 2024 Comprehensive Security Assessment',
      description: 'Quarterly comprehensive vulnerability assessment across all production environments',
      status: 'completed',
      
      scope: {
        assets: ['app-portal-001', 'db-prod-001', 'api-gateway-001'],
        environments: ['production', 'staging'],
        scanTypes: ['vulnerability', 'configuration', 'compliance'],
        depth: 'deep'
      },
      
      methodology: ['OWASP Top 10', 'NIST Cybersecurity Framework', 'SANS Top 25'],
      tools: ['Nessus', 'OpenVAS', 'Burp Suite', 'Custom Scripts'],
      
      vulnerabilities: mockVulnerabilities,
      
      summary: {
        totalVulnerabilities: 1,
        criticalVulnerabilities: 1,
        highVulnerabilities: 0,
        mediumVulnerabilities: 0,
        lowVulnerabilities: 0,
        
        averageRiskScore: 95,
        totalRiskScore: 95,
        riskDistribution: {
          'critical': 1,
          'high': 0,
          'medium': 0,
          'low': 0
        },
        
        averageCVSSScore: 9.8,
        cvssDistribution: {
          '9.0-10.0': 1,
          '7.0-8.9': 0,
          '4.0-6.9': 0,
          '0.1-3.9': 0
        },
        
        patchableVulnerabilities: 1,
        remediationEffort: {
          'low': 0,
          'medium': 1,
          'high': 0
        },
        
        criticalAssetsAffected: 1,
        totalAssetsAffected: 1,
        complianceImpact: ['PCI DSS', 'SOC 2', 'GDPR']
      },
      
      startedAt: new Date(Date.now() - 86400000).toISOString(),
      completedAt: new Date(Date.now() - 3600000).toISOString(),
      duration: 20,
      progress: 100,
      
      createdBy: 'security-team@company.com',
      createdAt: new Date(Date.now() - 86400000).toISOString(),
      updatedAt: new Date(Date.now() - 3600000).toISOString(),
      version: '1.0'
    }
  ], [mockVulnerabilities]);

  // ==================== Utility Functions ====================

  const getSeverityColor = (severity: VulnerabilitySeverity): string => {
    switch (severity) {
      case VulnerabilitySeverity.CRITICAL:
        return 'text-red-600';
      case VulnerabilitySeverity.HIGH:
        return 'text-orange-600';
      case VulnerabilitySeverity.MEDIUM:
        return 'text-yellow-600';
      case VulnerabilitySeverity.LOW:
        return 'text-green-600';
      case VulnerabilitySeverity.NONE:
        return 'text-gray-600';
      default:
        return 'text-gray-600';
    }
  };

  const getSeverityBadgeVariant = (severity: VulnerabilitySeverity) => {
    switch (severity) {
      case VulnerabilitySeverity.CRITICAL:
        return 'destructive';
      case VulnerabilitySeverity.HIGH:
        return 'destructive';
      case VulnerabilitySeverity.MEDIUM:
        return 'default';
      case VulnerabilitySeverity.LOW:
        return 'secondary';
      case VulnerabilitySeverity.NONE:
        return 'outline';
      default:
        return 'outline';
    }
  };

  const getStatusColor = (status: VulnerabilityStatus): string => {
    switch (status) {
      case VulnerabilityStatus.NEW:
        return 'text-blue-600';
      case VulnerabilityStatus.CONFIRMED:
        return 'text-orange-600';
      case VulnerabilityStatus.IN_PROGRESS:
        return 'text-yellow-600';
      case VulnerabilityStatus.RESOLVED:
        return 'text-green-600';
      case VulnerabilityStatus.FALSE_POSITIVE:
        return 'text-gray-600';
      case VulnerabilityStatus.SUPPRESSED:
        return 'text-purple-600';
      case VulnerabilityStatus.WONT_FIX:
        return 'text-red-600';
      case VulnerabilityStatus.DUPLICATE:
        return 'text-gray-600';
      default:
        return 'text-gray-600';
    }
  };

  const formatDateTime = (dateTime: string): string => {
    if (!dateTime) return 'N/A';
    return new Date(dateTime).toLocaleString();
  };

  const formatCVSSScore = (score: number): string => {
    return score.toFixed(1);
  };

  const getCVSSRating = (score: number): string => {
    if (score >= 9.0) return 'Critical';
    if (score >= 7.0) return 'High';
    if (score >= 4.0) return 'Medium';
    if (score > 0.0) return 'Low';
    return 'None';
  };

  // ==================== Event Handlers ====================

  const handleMarkAsResolved = useCallback(async (vulnId: string) => {
    setVulnInProgress(prev => ({ ...prev, [vulnId]: true }));
    
    try {
      setVulnerabilities(prev =>
        prev.map(vuln =>
          vuln.id === vulnId
            ? { 
                ...vuln, 
                status: VulnerabilityStatus.RESOLVED,
                updatedAt: new Date().toISOString(),
                timeToRemediation: Math.floor((Date.now() - new Date(vuln.discoveredAt).getTime()) / (1000 * 60 * 60))
              }
            : vuln
        )
      );
      
      toast({
        title: "Vulnerability Resolved",
        description: "Vulnerability has been marked as resolved.",
      });
    } catch (error) {
      toast({
        title: "Resolution Failed",
        description: "Failed to resolve vulnerability. Please try again.",
        variant: "destructive",
      });
    } finally {
      setVulnInProgress(prev => ({ ...prev, [vulnId]: false }));
    }
  }, [toast]);

  const handleMarkAsFalsePositive = useCallback(async (vulnId: string) => {
    try {
      setVulnerabilities(prev =>
        prev.map(vuln =>
          vuln.id === vulnId
            ? { 
                ...vuln, 
                status: VulnerabilityStatus.FALSE_POSITIVE,
                falsePositive: true,
                updatedAt: new Date().toISOString()
              }
            : vuln
        )
      );
      
      toast({
        title: "Marked as False Positive",
        description: "Vulnerability has been marked as false positive.",
      });
    } catch (error) {
      toast({
        title: "Update Failed",
        description: "Failed to update vulnerability status.",
        variant: "destructive",
      });
    }
  }, [toast]);

  const handleAssignVulnerability = useCallback(async (vulnId: string, assignee: string) => {
    try {
      setVulnerabilities(prev =>
        prev.map(vuln =>
          vuln.id === vulnId
            ? { 
                ...vuln, 
                assignedTo: assignee,
                status: VulnerabilityStatus.IN_PROGRESS,
                updatedAt: new Date().toISOString()
              }
            : vuln
        )
      );
      
      toast({
        title: "Vulnerability Assigned",
        description: `Vulnerability has been assigned to ${assignee}.`,
      });
    } catch (error) {
      toast({
        title: "Assignment Failed",
        description: "Failed to assign vulnerability.",
        variant: "destructive",
      });
    }
  }, [toast]);

  // ==================== Effects ====================

  useEffect(() => {
    // Initialize mock data
    setVulnerabilities(mockVulnerabilities);
    setAssessments(mockAssessments);
  }, [mockVulnerabilities, mockAssessments]);

  useEffect(() => {
    // Calculate real-time metrics
    const criticalCount = vulnerabilities.filter(v => v.severity === VulnerabilitySeverity.CRITICAL).length;
    const highCount = vulnerabilities.filter(v => v.severity === VulnerabilitySeverity.HIGH).length;
    const resolvedCount = vulnerabilities.filter(v => v.status === VulnerabilityStatus.RESOLVED).length;
    const avgCVSS = vulnerabilities.reduce((sum, v) => sum + v.cvssScore, 0) / vulnerabilities.length || 0;
    
    setVulnerabilityMetrics({
      totalVulnerabilities: vulnerabilities.length,
      criticalVulnerabilities: criticalCount,
      highVulnerabilities: highCount,
      resolvedVulnerabilities: resolvedCount,
      averageCVSSScore: avgCVSS,
      riskScore: vulnerabilities.reduce((sum, v) => sum + v.riskScore, 0) / vulnerabilities.length || 0,
      patchableVulnerabilities: vulnerabilities.filter(v => v.patchInfo.available).length,
      activelyExploited: vulnerabilities.filter(v => v.activelyExploited).length,
      lastUpdated: new Date().toISOString()
    });
  }, [vulnerabilities]);

  // ==================== Filtered Data ====================

  const filteredVulnerabilities = useMemo(() => {
    let filtered = vulnerabilities;
    
    if (filterSeverity !== 'all') {
      filtered = filtered.filter(vuln => vuln.severity === filterSeverity);
    }
    
    if (filterStatus !== 'all') {
      filtered = filtered.filter(vuln => vuln.status === filterStatus);
    }
    
    if (filterAsset !== 'all') {
      filtered = filtered.filter(vuln => vuln.location.assetId === filterAsset);
    }
    
    if (filterEnvironment !== 'all') {
      filtered = filtered.filter(vuln => vuln.location.environment === filterEnvironment);
    }
    
    if (searchQuery) {
      filtered = filtered.filter(vuln =>
        vuln.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        vuln.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
        vuln.cveId?.toLowerCase().includes(searchQuery.toLowerCase()) ||
        vuln.location.assetName.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }
    
    return filtered.sort((a, b) => {
      const aValue = a[sortBy as keyof Vulnerability] as number;
      const bValue = b[sortBy as keyof Vulnerability] as number;
      
      if (sortOrder === 'asc') {
        return aValue - bValue;
      } else {
        return bValue - aValue;
      }
    });
  }, [vulnerabilities, filterSeverity, filterStatus, filterAsset, filterEnvironment, searchQuery, sortBy, sortOrder]);

  // ==================== Dashboard Component ====================

  const VulnerabilityDashboard = () => (
    <div className="space-y-6">
      {/* Vulnerability Metrics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Vulnerabilities</CardTitle>
            <Bug className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{vulnerabilityMetrics?.totalVulnerabilities || 0}</div>
            <div className="flex space-x-2 mt-2">
              <Badge variant="destructive" className="text-xs">
                {vulnerabilityMetrics?.criticalVulnerabilities || 0} Critical
              </Badge>
              <Badge variant="default" className="text-xs">
                {vulnerabilityMetrics?.highVulnerabilities || 0} High
              </Badge>
            </div>
            <p className="text-xs text-muted-foreground mt-2">
              {vulnerabilityMetrics?.resolvedVulnerabilities || 0} resolved
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Average CVSS Score</CardTitle>
            <Gauge className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {formatCVSSScore(vulnerabilityMetrics?.averageCVSSScore || 0)}
            </div>
            <div className="flex space-x-2 mt-2">
              <Badge variant={
                (vulnerabilityMetrics?.averageCVSSScore || 0) >= 7.0 ? 'destructive' : 'default'
              }>
                {getCVSSRating(vulnerabilityMetrics?.averageCVSSScore || 0)}
              </Badge>
            </div>
            <p className="text-xs text-muted-foreground mt-2">
              Risk assessment score
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Actively Exploited</CardTitle>
            <Skull className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">
              {vulnerabilityMetrics?.activelyExploited || 0}
            </div>
            <div className="flex space-x-2 mt-2">
              <Badge variant="destructive">
                High Priority
              </Badge>
            </div>
            <p className="text-xs text-muted-foreground mt-2">
              Require immediate attention
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Patchable</CardTitle>
            <Shield className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">
              {vulnerabilityMetrics?.patchableVulnerabilities || 0}
            </div>
            <div className="flex space-x-2 mt-2">
              <Badge variant="secondary">
                Patches Available
              </Badge>
            </div>
            <p className="text-xs text-muted-foreground mt-2">
              Ready for remediation
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Critical Vulnerabilities Alert */}
      {vulnerabilityMetrics?.criticalVulnerabilities > 0 && (
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertTitle>Critical Vulnerabilities Detected</AlertTitle>
          <AlertDescription>
            {vulnerabilityMetrics.criticalVulnerabilities} critical vulnerabilities require immediate attention. 
            {vulnerabilityMetrics.activelyExploited > 0 && 
              ` ${vulnerabilityMetrics.activelyExploited} are actively being exploited.`
            }
          </AlertDescription>
        </Alert>
      )}

      {/* Vulnerability Summary Chart */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Vulnerability Distribution</CardTitle>
            <CardDescription>
              Breakdown by severity level
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {[
                { severity: 'Critical', count: vulnerabilityMetrics?.criticalVulnerabilities || 0, color: 'bg-red-500' },
                { severity: 'High', count: vulnerabilityMetrics?.highVulnerabilities || 0, color: 'bg-orange-500' },
                { severity: 'Medium', count: 0, color: 'bg-yellow-500' },
                { severity: 'Low', count: 0, color: 'bg-green-500' }
              ].map((item) => (
                <div key={item.severity} className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <div className={cn("h-3 w-3 rounded-full", item.color)} />
                    <span className="text-sm font-medium">{item.severity}</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span className="text-sm">{item.count}</span>
                    <div className="w-20 bg-gray-200 rounded-full h-2">
                      <div 
                        className={cn("h-2 rounded-full", item.color)}
                        style={{ 
                          width: `${(item.count / (vulnerabilityMetrics?.totalVulnerabilities || 1)) * 100}%` 
                        }}
                      />
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Recent Vulnerabilities</CardTitle>
            <CardDescription>
              Latest discovered vulnerabilities
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {vulnerabilities.slice(0, 5).map((vuln) => (
                <div key={vuln.id} className="flex items-center justify-between p-3 border rounded-lg">
                  <div className="flex items-center space-x-3">
                    <Badge variant={getSeverityBadgeVariant(vuln.severity) as any}>
                      {vuln.severity}
                    </Badge>
                    <div>
                      <p className="font-medium text-sm">{vuln.title}</p>
                      <p className="text-xs text-muted-foreground">
                        {vuln.location.assetName} ‚Ä¢ CVSS {formatCVSSScore(vuln.cvssScore)}
                      </p>
                    </div>
                  </div>
                  <div className="text-right text-sm">
                    <div className="font-medium">
                      {formatDateTime(vuln.discoveredAt)}
                    </div>
                    <div className={cn("text-xs", getStatusColor(vuln.status))}>
                      {vuln.status.replace('_', ' ').toUpperCase()}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Quick Actions */}
      <Card>
        <CardHeader>
          <CardTitle>Quick Actions</CardTitle>
          <CardDescription>
            Common vulnerability management tasks
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <Button 
              variant="outline"
              className="h-20 flex flex-col items-center justify-center space-y-2"
              onClick={() => setShowCreateAssessmentDialog(true)}
            >
              <Plus className="h-6 w-6" />
              <span className="text-sm">New Assessment</span>
            </Button>

            <Button 
              variant="outline"
              className="h-20 flex flex-col items-center justify-center space-y-2"
              onClick={() => setShowCVSSCalculatorDialog(true)}
            >
              <Gauge className="h-6 w-6" />
              <span className="text-sm">CVSS Calculator</span>
            </Button>

            <Button 
              variant="outline"
              className="h-20 flex flex-col items-center justify-center space-y-2"
            >
              <Download className="h-6 w-6" />
              <span className="text-sm">Export Report</span>
            </Button>

            <Button 
              variant="outline"
              className="h-20 flex flex-col items-center justify-center space-y-2"
              onClick={refreshSecurityData}
            >
              <RefreshCw className="h-6 w-6" />
              <span className="text-sm">Refresh Data</span>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );

  // ==================== Main Render ====================

  if (loading) {
    return (
      <div className="flex items-center justify-center h-96">
        <div className="text-center">
          <RefreshCw className="h-8 w-8 animate-spin mx-auto mb-4" />
          <p>Loading vulnerability assessment...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertTriangle className="h-4 w-4" />
        <AlertTitle>Error</AlertTitle>
        <AlertDescription>
          Failed to load vulnerability data: {error.message}
        </AlertDescription>
      </Alert>
    );
  }

  return (
    <TooltipProvider>
      <div className="container mx-auto p-6 space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold">Vulnerability Assessment</h1>
            <p className="text-muted-foreground">
              Comprehensive vulnerability management and risk assessment platform
            </p>
          </div>
          <div className="flex items-center space-x-2">
            <Badge variant="outline" className="flex items-center space-x-1">
              <Bug className="h-3 w-3" />
              <span>{vulnerabilityMetrics?.totalVulnerabilities || 0} Total</span>
            </Badge>
            <Badge variant="destructive" className="flex items-center space-x-1">
              <Skull className="h-3 w-3" />
              <span>{vulnerabilityMetrics?.criticalVulnerabilities || 0} Critical</span>
            </Badge>
            <Button variant="outline" size="sm" onClick={refreshSecurityData}>
              <RefreshCw className="h-4 w-4 mr-2" />
              Refresh
            </Button>
          </div>
        </div>

        {/* Main Content */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-5">
            <TabsTrigger value="dashboard" className="flex items-center space-x-2">
              <BarChart3 className="h-4 w-4" />
              <span>Dashboard</span>
            </TabsTrigger>
            <TabsTrigger value="vulnerabilities" className="flex items-center space-x-2">
              <Bug className="h-4 w-4" />
              <span>Vulnerabilities</span>
            </TabsTrigger>
            <TabsTrigger value="assessments" className="flex items-center space-x-2">
              <ClipboardCheck className="h-4 w-4" />
              <span>Assessments</span>
            </TabsTrigger>
            <TabsTrigger value="remediation" className="flex items-center space-x-2">
              <Shield className="h-4 w-4" />
              <span>Remediation</span>
            </TabsTrigger>
            <TabsTrigger value="reports" className="flex items-center space-x-2">
              <FileText className="h-4 w-4" />
              <span>Reports</span>
            </TabsTrigger>
          </TabsList>

          <TabsContent value="dashboard">
            <VulnerabilityDashboard />
          </TabsContent>

          <TabsContent value="vulnerabilities">
            <div className="text-center py-12">
              <Bug className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
              <h3 className="text-lg font-semibold mb-2">Vulnerability Management</h3>
              <p className="text-muted-foreground">
                Detailed vulnerability tracking and management interface coming soon
              </p>
            </div>
          </TabsContent>

          <TabsContent value="assessments">
            <div className="text-center py-12">
              <ClipboardCheck className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
              <h3 className="text-lg font-semibold mb-2">Security Assessments</h3>
              <p className="text-muted-foreground">
                Vulnerability assessment management interface coming soon
              </p>
            </div>
          </TabsContent>

          <TabsContent value="remediation">
            <div className="text-center py-12">
              <Shield className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
              <h3 className="text-lg font-semibold mb-2">Remediation Management</h3>
              <p className="text-muted-foreground">
                Vulnerability remediation tracking interface coming soon
              </p>
            </div>
          </TabsContent>

          <TabsContent value="reports">
            <div className="text-center py-12">
              <FileText className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
              <h3 className="text-lg font-semibold mb-2">Vulnerability Reports</h3>
              <p className="text-muted-foreground">
                Executive vulnerability reporting interface coming soon
              </p>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </TooltipProvider>
  );
};

export default VulnerabilityAssessment;