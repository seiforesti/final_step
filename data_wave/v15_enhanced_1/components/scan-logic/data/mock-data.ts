import type { ScanConfig, ScanRun, ScanSchedule, DiscoveredEntity, ScanIssue } from "../types"

export const mockScanConfigs: ScanConfig[] = [
  {
    id: "scan-1",
    name: "Customer Data Discovery",
    description: "Full scan of customer database for PII and sensitive data",
    dataSourceId: "ds-1",
    dataSourceName: "Customer PostgreSQL",
    scanType: "full",
    scope: {
      databases: ["customer_db"],
      schemas: ["public", "analytics"],
      tables: ["users", "orders", "payments"],
    },
    settings: {
      enablePII: true,
      enableClassification: true,
      enableLineage: true,
      enableQuality: true,
      parallelism: 4,
    },
    schedule: {
      enabled: true,
      cron: "0 2 * * *",
      timezone: "UTC",
    },
    createdAt: "2024-01-15T10:00:00Z",
    updatedAt: "2024-01-20T14:30:00Z",
    createdBy: "john.doe@company.com",
    status: "active",
  },
  {
    id: "scan-2",
    name: "Sales Data Classification",
    description: "Incremental scan for sales data classification",
    dataSourceId: "ds-2",
    dataSourceName: "Sales MySQL",
    scanType: "incremental",
    scope: {
      databases: ["sales_db"],
      schemas: ["reporting"],
    },
    settings: {
      enablePII: false,
      enableClassification: true,
      enableLineage: false,
      enableQuality: true,
      parallelism: 2,
    },
    createdAt: "2024-01-10T09:00:00Z",
    updatedAt: "2024-01-18T16:45:00Z",
    createdBy: "jane.smith@company.com",
    status: "active",
  },
  {
    id: "scan-3",
    name: "Data Lake Sample Scan",
    description: "Sample scan of data lake for initial assessment",
    dataSourceId: "ds-3",
    dataSourceName: "AWS S3 Data Lake",
    scanType: "sample",
    scope: {
      databases: ["datalake"],
    },
    settings: {
      enablePII: true,
      enableClassification: true,
      enableLineage: true,
      enableQuality: false,
      sampleSize: 1000,
      parallelism: 8,
    },
    createdAt: "2024-01-12T11:30:00Z",
    updatedAt: "2024-01-12T11:30:00Z",
    createdBy: "admin@company.com",
    status: "draft",
  },
]

export const mockScanRuns: ScanRun[] = [
  {
    id: "run-1",
    scanId: "scan-1",
    scanName: "Customer Data Discovery",
    status: "running",
    startTime: "2024-01-21T02:00:00Z",
    progress: 65,
    entitiesScanned: 1250,
    entitiesTotal: 1920,
    issuesFound: 23,
    dataSourceName: "Customer PostgreSQL",
    triggeredBy: "scheduled",
    logs: [
      {
        id: "log-1",
        timestamp: "2024-01-21T02:00:00Z",
        level: "info",
        message: "Scan started successfully",
      },
      {
        id: "log-2",
        timestamp: "2024-01-21T02:15:00Z",
        level: "info",
        message: "Scanning database: customer_db",
      },
      {
        id: "log-3",
        timestamp: "2024-01-21T02:30:00Z",
        level: "warning",
        message: "PII detected in users.email column",
      },
    ],
  },
  {
    id: "run-2",
    scanId: "scan-2",
    scanName: "Sales Data Classification",
    status: "completed",
    startTime: "2024-01-20T08:00:00Z",
    endTime: "2024-01-20T08:45:00Z",
    duration: 2700,
    progress: 100,
    entitiesScanned: 456,
    entitiesTotal: 456,
    issuesFound: 8,
    dataSourceName: "Sales MySQL",
    triggeredBy: "manual",
    logs: [],
  },
  {
    id: "run-3",
    scanId: "scan-1",
    scanName: "Customer Data Discovery",
    status: "failed",
    startTime: "2024-01-19T02:00:00Z",
    endTime: "2024-01-19T02:15:00Z",
    duration: 900,
    progress: 15,
    entitiesScanned: 120,
    entitiesTotal: 1920,
    issuesFound: 0,
    dataSourceName: "Customer PostgreSQL",
    triggeredBy: "scheduled",
    logs: [
      {
        id: "log-4",
        timestamp: "2024-01-19T02:15:00Z",
        level: "error",
        message: "Connection timeout to database",
      },
    ],
  },
]

export const mockScanSchedules: ScanSchedule[] = [
  {
    id: "schedule-1",
    scanId: "scan-1",
    scanName: "Customer Data Discovery",
    enabled: true,
    cron: "0 2 * * *",
    timezone: "UTC",
    nextRun: "2024-01-22T02:00:00Z",
    lastRun: "2024-01-21T02:00:00Z",
    lastStatus: "success",
    createdAt: "2024-01-15T10:00:00Z",
    updatedAt: "2024-01-20T14:30:00Z",
  },
  {
    id: "schedule-2",
    scanId: "scan-2",
    scanName: "Sales Data Classification",
    enabled: false,
    cron: "0 */6 * * *",
    timezone: "America/New_York",
    nextRun: "2024-01-21T18:00:00Z",
    lastRun: "2024-01-20T12:00:00Z",
    lastStatus: "success",
    createdAt: "2024-01-10T09:00:00Z",
    updatedAt: "2024-01-18T16:45:00Z",
  },
]

export const mockDiscoveredEntities: DiscoveredEntity[] = [
  {
    id: "entity-1",
    name: "users",
    type: "table",
    path: "customer_db.public.users",
    dataSource: "Customer PostgreSQL",
    schema: "public",
    classifications: ["PII", "Customer Data"],
    piiTags: ["email", "phone", "address"],
    qualityScore: 85,
    lastModified: "2024-01-20T15:30:00Z",
    rowCount: 125000,
    size: 45000000,
    description: "Customer user accounts and profile information",
  },
  {
    id: "entity-2",
    name: "email",
    type: "column",
    path: "customer_db.public.users.email",
    dataSource: "Customer PostgreSQL",
    schema: "public",
    table: "users",
    dataType: "varchar(255)",
    nullable: false,
    classifications: ["PII", "Email"],
    piiTags: ["email"],
    qualityScore: 92,
    description: "User email addresses",
  },
  {
    id: "entity-3",
    name: "orders",
    type: "table",
    path: "customer_db.public.orders",
    dataSource: "Customer PostgreSQL",
    schema: "public",
    classifications: ["Transaction Data"],
    piiTags: [],
    qualityScore: 78,
    lastModified: "2024-01-21T09:15:00Z",
    rowCount: 450000,
    size: 120000000,
    description: "Customer order transactions",
  },
]

export const mockScanIssues: ScanIssue[] = [
  {
    id: "issue-1",
    severity: "high",
    type: "security",
    title: "Unencrypted PII Data",
    description: "Email addresses are stored in plain text without encryption",
    entity: "customer_db.public.users.email",
    recommendation: "Implement column-level encryption for email addresses",
    impact: "High risk of data breach and compliance violations",
    status: "open",
  },
  {
    id: "issue-2",
    severity: "medium",
    type: "data_quality",
    title: "Missing Data Validation",
    description: "Phone number column contains invalid formats",
    entity: "customer_db.public.users.phone",
    recommendation: "Add data validation rules for phone number format",
    impact: "Poor data quality affecting analytics and reporting",
    status: "open",
  },
  {
    id: "issue-3",
    severity: "low",
    type: "governance",
    title: "Missing Documentation",
    description: "Table lacks proper documentation and metadata",
    entity: "customer_db.public.orders",
    recommendation: "Add table and column descriptions",
    impact: "Reduced data discoverability and understanding",
    status: "resolved",
  },
]
