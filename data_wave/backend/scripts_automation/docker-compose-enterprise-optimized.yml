# ========================================
# ENTERPRISE DATA GOVERNANCE BACKEND COMPOSE
# OPTIMIZED FOR HIGH LOAD AND AVAILABILITY
# ========================================
# Complete container orchestration with PostgreSQL optimization
# and PgBouncer connection pooling

services:
  # Main Backend Application
  backend:
    build: .
    container_name: data_governance_backend
    user: root
    ports:
      - "8000:8000"
    environment:
      # Use PgBouncer for connection pooling
      - DATABASE_URL=postgresql://postgres:postgres@data_governance_pgbouncer:6432/data_governance
      - DB_URL=postgresql://postgres:postgres@data_governance_pgbouncer:6432/data_governance
      - REDIS_URL=redis://data_governance_redis:6379
      - ENVIRONMENT=development
      # PgBouncer optimization settings
      - DB_USE_PGBOUNCER=true
      # Fail-fast DB timeouts to avoid backend hangs on stuck queries
      - DB_CONNECT_TIMEOUT=10
      - DB_STATEMENT_TIMEOUT_MS=15000
      - DB_IDLE_IN_TXN_TIMEOUT_MS=15000
      - DB_APPLICATION_NAME=data_governance_backend
      - LOG_LEVEL=INFO
      # DB pool & concurrency safety - OPTIMIZED FOR ENTERPRISE LOAD
      - DB_POOL_SIZE=25                    # Reduced since PgBouncer handles pooling
      - DB_MAX_OVERFLOW=10                 # Reduced overflow
      - DB_POOL_TIMEOUT=30                 # Faster timeout
      - MAX_CONCURRENT_DB_REQUESTS=50      # Increased for PgBouncer
      - DB_SEMAPHORE_TIMEOUT=3             # Faster semaphore timeout
      # Auto cleanup under high utilization - MORE AGGRESSIVE
      - AUTO_FORCE_DB_CLEANUP=true
      - CLEANUP_UTIL_THRESHOLD=70          # Higher threshold
      - CLEANUP_MIN_INTERVAL_SEC=10        # More frequent cleanup
      # Frontend URL used for OAuth callbacks/root redirects
      - FRONTEND_URL=http://localhost:3000/app
      # Disable optional performance service to avoid startup errors
      - ENABLE_PERFORMANCE_SERVICE=false
      # OAuth configuration (set real values before deploy)
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=http://localhost:8000/auth/google/callback
      - GOOGLE_SCOPES=openid email profile
      - MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}
      - MICROSOFT_CLIENT_SECRET=${MICROSOFT_CLIENT_SECRET}
      - MICROSOFT_REDIRECT_URI=http://localhost:8000/auth/microsoft/callback
      - MICROSOFT_SCOPES=openid email profile User.Read
      - MICROSOFT_TENANT=common
      # SpaCy model installation path
      - SPACY_MODEL_PATH=/opt/venv/lib/python3.11/site-packages
    depends_on:
      pgbouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      sh -c "
        echo 'Starting backend service...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # PgBouncer Connection Pooler
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: data_governance_pgbouncer
    environment:
      - DATABASES_HOST=data_governance_postgres
      - DATABASES_PORT=5432
      - DATABASES_USER=postgres
      - DATABASES_PASSWORD=postgres
      - DATABASES_DBNAME=data_governance
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=1000
      - DEFAULT_POOL_SIZE=50
      - MIN_POOL_SIZE=10
      - RESERVE_POOL_SIZE=10
      - RESERVE_POOL_TIMEOUT=5
      - SERVER_CONNECT_TIMEOUT=15
      - SERVER_LOGIN_RETRY=15
      # Avoid infinite query time; set a finite timeout (ms)
      - QUERY_TIMEOUT=30000
      - QUERY_WAIT_TIMEOUT=120
      - CLIENT_IDLE_TIMEOUT=0
      - CLIENT_LOGIN_TIMEOUT=60
      - AUTODB_IDLE_TIMEOUT=3600
      - LOG_CONNECTIONS=1
      - LOG_DISCONNECTIONS=1
      - LOG_POOLER_ERRORS=1
      - LOG_STATS=1
      - STATS_PERIOD=60
      - ADMIN_USERS=postgres
      - STATS_USERS=postgres
      - SERVER_RESET_QUERY=DISCARD ALL
      - SERVER_CHECK_QUERY=SELECT 1
      - SERVER_CHECK_DELAY=30
      - SERVER_LIFETIME=3600
      - SERVER_IDLE_TIMEOUT=600
      - MAX_USER_CONNECTIONS=100
    ports:
      - "6432:6432"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "pgbouncer", "-u", "postgres", "-h", "localhost", "-p", "6432", "-d", "data_governance", "-c", "SHOW VERSION;"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      - ./pgbouncer.conf:/etc/pgbouncer/pgbouncer.conf
      - ./userlist.txt:/etc/pgbouncer/userlist.txt

  # PostgreSQL Database (Optimized)
  postgres:
    image: postgres:15-alpine
    container_name: data_governance_postgres
    environment:
      - POSTGRES_DB=data_governance
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      # Performance optimizations
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --lc-collate=C --lc-ctype=C
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
      - ./postgres_enterprise_optimized.conf:/etc/postgresql/postgresql.conf
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G                      # Increased memory for optimization
          cpus: '1.0'                     # Increased CPU
        reservations:
          memory: 1G                      # Increased reservation
          cpus: '0.5'                     # Increased CPU reservation
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d data_governance"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  # pgAdmin for PostgreSQL Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: data_governance_pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Redis Cache (Optimized)
  redis:
    image: redis:7-alpine
    container_name: data_governance_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M                    # Increased memory
          cpus: '0.5'                     # Increased CPU
        reservations:
          memory: 256M                    # Increased reservation
          cpus: '0.25'                    # Increased CPU reservation
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru --tcp-keepalive 60

  # Elasticsearch for Search (Optimized)
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: data_governance_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g -XX:+UseG1GC -XX:G1ReservePercent=25 -XX:MaxGCPauseMillis=200"
      - cluster.routing.allocation.disk.threshold_enabled=false
      - cluster.routing.allocation.disk.watermark.low=93%
      - cluster.routing.allocation.disk.watermark.high=95%
      - cluster.routing.allocation.disk.watermark.flood_stage=97%
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G                      # Increased memory
          cpus: '2.0'                     # Increased CPU
        reservations:
          memory: 2G                      # Increased reservation
          cpus: '1.0'                     # Increased CPU reservation
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Kafka for Message Broker (Optimized)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: data_governance_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_MAX_CLIENT_CNXNS: 60
      ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT: 3
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: 24
    ports:
      - "2181:2181"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G                      # Increased memory
          cpus: '1.0'                     # Increased CPU
        reservations:
          memory: 512M                    # Increased reservation
          cpus: '0.5'                     # Increased CPU reservation

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: data_governance_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 10000
      KAFKA_LOG_FLUSH_INTERVAL_MS: 1000
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G                      # Increased memory
          cpus: '1.5'                     # Increased CPU
        reservations:
          memory: 1G                      # Increased reservation
          cpus: '0.75'                    # Increased CPU reservation
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MongoDB for Document Storage (Optimized)
  mongodb:
    image: mongo:6.0
    container_name: data_governance_mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G                      # Increased memory
          cpus: '1.0'                     # Increased CPU
        reservations:
          memory: 512M                    # Increased reservation
          cpus: '0.5'                     # Increased CPU reservation
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Prometheus for Metrics (Optimized)
  prometheus:
    image: prom/prometheus:latest
    container_name: data_governance_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.size=2GB'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M                    # Increased memory
          cpus: '0.5'                     # Increased CPU
        reservations:
          memory: 256M                    # Increased reservation
          cpus: '0.25'                    # Increased CPU reservation

  # Grafana for Visualization (Optimized)
  grafana:
    image: grafana/grafana:latest
    container_name: data_governance_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M                    # Increased memory
          cpus: '0.5'                     # Increased CPU
        reservations:
          memory: 256M                    # Increased reservation
          cpus: '0.25'                    # Increased CPU reservation

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  mongodb_data:
  prometheus_data:
  grafana_data:
  pgadmin_data:

networks:
  default:
    name: data_governance_network
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
