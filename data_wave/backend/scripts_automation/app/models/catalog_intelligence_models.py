"""
Catalog Intelligence Models for Enterprise Data Governance System
===============================================================

This module contains sophisticated models for AI-powered catalog intelligence,
semantic understanding, recommendation engines, and advanced analytics for
data discovery and usage optimization.

Features:
- Semantic understanding with NLP/AI capabilities
- Intelligent recommendation engines
- Usage pattern analysis and optimization
- Collaborative filtering for data discovery
- Advanced analytics and insights
- Knowledge graph integration
- Real-time intelligence and monitoring
"""

from sqlmodel import SQLModel, Field, Relationship, Column, JSON, String, Text, ARRAY, Integer, Float, Boolean, DateTime
from typing import List, Optional, Dict, Any, Union, Set, Tuple, Generic, TypeVar
from datetime import datetime, timedelta
from enum import Enum
import uuid
import json
from pydantic import BaseModel, validator, Field as PydanticField
from sqlalchemy import Index, UniqueConstraint, CheckConstraint, ForeignKey
from sqlalchemy.dialects.postgresql import UUID, JSONB
import numpy as np

# ===================== ENUMS AND CONSTANTS =====================

class IntelligenceType(str, Enum):
    """Types of intelligence gathering and analysis"""
    SEMANTIC_ANALYSIS = "semantic_analysis"
    USAGE_PATTERNS = "usage_patterns"
    SIMILARITY_ANALYSIS = "similarity_analysis"
    RECOMMENDATION = "recommendation"
    ANOMALY_DETECTION = "anomaly_detection"
    TREND_ANALYSIS = "trend_analysis"
    QUALITY_INSIGHTS = "quality_insights"
    BUSINESS_INSIGHTS = "business_insights"

class RecommendationType(str, Enum):
    """Types of recommendations generated by the system"""
    SIMILAR_DATASETS = "similar_datasets"
    RELATED_ASSETS = "related_assets"
    QUALITY_IMPROVEMENT = "quality_improvement"
    USAGE_OPTIMIZATION = "usage_optimization"
    DATA_DISCOVERY = "data_discovery"
    GOVERNANCE_COMPLIANCE = "governance_compliance"
    COLLABORATION = "collaboration"
    LEARNING_RESOURCES = "learning_resources"

class SemanticRelationType(str, Enum):
    """Types of semantic relationships between assets"""
    SYNONYMS = "synonyms"
    HYPERNYMS = "hypernyms"      # Is-a relationships
    HYPONYMS = "hyponyms"        # Specific-of relationships
    MERONYMS = "meronyms"        # Part-of relationships
    HOLONYMS = "holonyms"        # Has-part relationships
    SIMILAR = "similar"
    RELATED = "related"
    ANTONYMS = "antonyms"
    FUNCTIONAL = "functional"     # Functional relationships

class AnalysisConfidence(str, Enum):
    """Confidence levels for AI analysis results"""
    VERY_HIGH = "very_high"      # 95-100%
    HIGH = "high"                # 85-94%
    MEDIUM = "medium"            # 70-84%
    LOW = "low"                  # 50-69%
    VERY_LOW = "very_low"        # Below 50%

class UsagePattern(str, Enum):
    """Common usage patterns identified by the system"""
    FREQUENT_ACCESS = "frequent_access"
    PERIODIC_BATCH = "periodic_batch"
    EXPLORATORY = "exploratory"
    REPORTING = "reporting"
    ANALYTICS = "analytics"
    ML_TRAINING = "ml_training"
    REAL_TIME = "real_time"
    SEASONAL = "seasonal"

# ===================== SEMANTIC INTELLIGENCE MODELS =====================

class SemanticEmbedding(SQLModel, table=True):
    """
    Stores semantic embeddings for catalog assets using vector representations.
    Enables similarity search and semantic understanding.
    """
    __tablename__ = "semantic_embeddings"
    
    id: Optional[int] = Field(default=None, primary_key=True)
    embedding_id: str = Field(index=True, unique=True)
    
    # Asset reference
    asset_type: str = Field(index=True)  # catalog_asset, column, description, etc.
    asset_id: str = Field(index=True)
    asset_name: str = Field(index=True)
    
    # Embedding details
    embedding_model: str = Field(index=True)  # model used to generate embedding
    embedding_version: str = Field(default="1.0")
    embedding_vector: Optional[List[float]] = Field(default=None, sa_column=Column(ARRAY(Float)))
    vector_dimensions: int = Field(default=768)
    
    # Context information
    text_content: Optional[str] = Field(default=None, sa_column=Column(Text))
    context_window: Optional[str] = Field(default=None, sa_column=Column(Text))
    language: str = Field(default="en", index=True)
    
    # Quality metrics
    embedding_quality_score: Optional[float] = Field(default=None)
    confidence_score: float = Field(default=0.0)
    
    # Processing metadata
    created_at: datetime = Field(default_factory=datetime.utcnow, index=True)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
    processing_time_ms: Optional[int] = Field(default=None)
    
    # Additional metadata
    custom_properties: Optional[Dict[str, Any]] = Field(default=None, sa_column=Column(JSON))
    
    class Config:
        arbitrary_types_allowed = True
    
    __table_args__ = (
        Index('idx_semantic_embedding_asset', 'asset_type', 'asset_id'),
        Index('idx_semantic_embedding_model', 'embedding_model', 'embedding_version'),
    )

class SemanticRelationship(SQLModel, table=True):
    """
    Represents semantic relationships between catalog assets.
    Used for building knowledge graphs and understanding connections.
    """
    __tablename__ = "semantic_relationships"
    
    id: Optional[int] = Field(default=None, primary_key=True)
    relationship_id: str = Field(index=True, unique=True)
    
    # Relationship endpoints
    source_asset_id: str = Field(index=True)
    target_asset_id: str = Field(index=True)
    source_asset_type: str = Field(index=True)
    target_asset_type: str = Field(index=True)
    
    # Relationship details
    relationship_type: SemanticRelationType = Field(index=True)
    relationship_strength: float = Field(default=0.0)  # 0.0 to 1.0
    confidence_score: float = Field(default=0.0)
    
    # Context and evidence
    evidence_text: Optional[str] = Field(default=None, sa_column=Column(Text))
    context_description: Optional[str] = Field(default=None, sa_column=Column(Text))
    supporting_metadata: Optional[Dict[str, Any]] = Field(default=None, sa_column=Column(JSON))
    
    # Discovery information
    discovery_method: str = Field(index=True)  # nlp, ml, manual, rule_based
    discovery_algorithm: Optional[str] = Field(default=None)
    discovery_date: datetime = Field(default_factory=datetime.utcnow)
    
    # Validation and quality
    is_validated: bool = Field(default=False)
    validation_date: Optional[datetime] = Field(default=None)
    validation_source: Optional[str] = Field(default=None)
    quality_score: Optional[float] = Field(default=None)
    
    # Usage and feedback
    usage_count: int = Field(default=0)
    positive_feedback: int = Field(default=0)
    negative_feedback: int = Field(default=0)
    
    # Audit fields
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
    created_by: str = Field(default="system")
    
    # Additional metadata
    custom_properties: Optional[Dict[str, Any]] = Field(default=None, sa_column=Column(JSON))
    
    class Config:
        arbitrary_types_allowed = True
    
    __table_args__ = (
        Index('idx_semantic_rel_source_target', 'source_asset_id', 'target_asset_id'),
        Index('idx_semantic_rel_type', 'relationship_type', 'relationship_strength'),
        UniqueConstraint('source_asset_id', 'target_asset_id', 'relationship_type',
                        name='uq_semantic_relationship'),
    )

# ===================== RECOMMENDATION ENGINE MODELS =====================

class RecommendationEngine(SQLModel, table=True):
    """
    Configuration and metadata for recommendation engines.
    Supports multiple recommendation algorithms and strategies.
    """
    __tablename__ = "recommendation_engines"
    
    id: Optional[int] = Field(default=None, primary_key=True)
    engine_id: str = Field(index=True, unique=True)
    engine_name: str = Field(index=True)
    
    # Engine configuration
    recommendation_type: RecommendationType = Field(index=True)
    algorithm_type: str = Field(index=True)  # collaborative, content_based, hybrid
    model_parameters: Dict[str, Any] = Field(default={}, sa_column=Column(JSON))
    
    # Performance settings
    max_recommendations: int = Field(default=10)
    min_confidence_threshold: float = Field(default=0.5)
    relevance_threshold: float = Field(default=0.3)
    diversity_factor: float = Field(default=0.2)
    
    # Training and model information
    model_version: str = Field(default="1.0")
    training_data_size: Optional[int] = Field(default=None)
    last_training_date: Optional[datetime] = Field(default=None)
    model_accuracy: Optional[float] = Field(default=None)
    
    # Feature weights
    semantic_weight: float = Field(default=0.3)
    usage_weight: float = Field(default=0.3)
    quality_weight: float = Field(default=0.2)
    business_weight: float = Field(default=0.2)
    
    # Status and lifecycle
    is_active: bool = Field(default=True, index=True)
    deployment_date: Optional[datetime] = Field(default=None)
    retirement_date: Optional[datetime] = Field(default=None)
    
    # Performance metrics
    total_recommendations: int = Field(default=0)
    successful_recommendations: int = Field(default=0)
    average_response_time_ms: Optional[float] = Field(default=None)
    
    # Audit fields
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
    created_by: str = Field(default="system")
    
    # Additional metadata
    custom_properties: Optional[Dict[str, Any]] = Field(default=None, sa_column=Column(JSON))
    
    class Config:
        arbitrary_types_allowed = True

class AssetRecommendation(SQLModel, table=True):
    """
    Stores recommendations generated for catalog assets.
    Tracks recommendation history and user feedback.
    """
    __tablename__ = "asset_recommendations"
    
    id: Optional[int] = Field(default=None, primary_key=True)
    recommendation_id: str = Field(index=True, unique=True)
    
    # Recommendation context
    user_id: str = Field(index=True)
    session_id: Optional[str] = Field(default=None, index=True)
    context_asset_id: Optional[str] = Field(default=None, index=True)  # Asset that triggered recommendation
    
    # Recommendation details
    recommended_asset_id: str = Field(index=True)
    recommendation_type: RecommendationType = Field(index=True)
    engine_id: str = Field(foreign_key="recommendation_engines.engine_id", index=True)
    
    # Scoring and ranking
    relevance_score: float = Field(default=0.0)
    confidence_score: float = Field(default=0.0)
    business_value_score: float = Field(default=0.0)
    quality_score: float = Field(default=0.0)
    final_score: float = Field(default=0.0)
    rank_position: int = Field(default=0)
    
    # Reasoning and explanation
    reasoning_factors: List[str] = Field(default=[], sa_column=Column(ARRAY(String)))
    explanation_text: Optional[str] = Field(default=None, sa_column=Column(Text))
    supporting_evidence: Optional[Dict[str, Any]] = Field(default=None, sa_column=Column(JSON))
    
    # User interaction
    was_presented: bool = Field(default=False)
    presentation_date: Optional[datetime] = Field(default=None)
    was_clicked: bool = Field(default=False)
    click_date: Optional[datetime] = Field(default=None)
    was_used: bool = Field(default=False)
    usage_date: Optional[datetime] = Field(default=None)
    
    # Feedback
    user_rating: Optional[int] = Field(default=None)  # 1-5 stars
    feedback_text: Optional[str] = Field(default=None, sa_column=Column(Text))
    feedback_date: Optional[datetime] = Field(default=None)
    is_helpful: Optional[bool] = Field(default=None)
    
    # Context and metadata
    recommendation_context: Optional[Dict[str, Any]] = Field(default=None, sa_column=Column(JSON))
    user_context: Optional[Dict[str, Any]] = Field(default=None, sa_column=Column(JSON))
    
    # Audit fields
    created_at: datetime = Field(default_factory=datetime.utcnow, index=True)
    expires_at: Optional[datetime] = Field(default=None, index=True)
    
    # Relationships
    engine: Optional[RecommendationEngine] = Relationship()
    
    class Config:
        arbitrary_types_allowed = True
    
    __table_args__ = (
        Index('idx_recommendation_user_asset', 'user_id', 'recommended_asset_id'),
        Index('idx_recommendation_context', 'context_asset_id', 'recommendation_type'),
        Index('idx_recommendation_score', 'final_score', 'rank_position'),
    )

# ===================== USAGE INTELLIGENCE MODELS =====================

class AssetUsagePattern(SQLModel, table=True):
    """
    Tracks and analyzes usage patterns for catalog assets.
    Provides insights into data consumption and optimization opportunities.
    """
    __tablename__ = "asset_usage_patterns"
    
    id: Optional[int] = Field(default=None, primary_key=True)
    pattern_id: str = Field(index=True, unique=True)
    
    # Asset reference
    asset_id: str = Field(index=True)
    asset_type: str = Field(index=True)
    
    # Pattern identification
    usage_pattern: UsagePattern = Field(index=True)
    pattern_confidence: AnalysisConfidence = Field(default=AnalysisConfidence.MEDIUM)
    pattern_strength: float = Field(default=0.0)  # 0.0 to 1.0
    
    # Temporal analysis
    analysis_period_start: datetime = Field(index=True)
    analysis_period_end: datetime = Field(index=True)
    pattern_frequency: Optional[str] = Field(default=None)  # daily, weekly, monthly
    
    # Usage statistics
    total_accesses: int = Field(default=0)
    unique_users: int = Field(default=0)
    unique_applications: int = Field(default=0)
    peak_usage_time: Optional[str] = Field(default=None)
    average_session_duration: Optional[float] = Field(default=None)
    
    # Performance metrics
    average_query_time: Optional[float] = Field(default=None)
    data_volume_accessed: Optional[int] = Field(default=None)
    error_rate: Optional[float] = Field(default=None)
    
    # User behavior analysis
    user_segments: Optional[Dict[str, Any]] = Field(default=None, sa_column=Column(JSON))
    access_patterns: Optional[Dict[str, Any]] = Field(default=None, sa_column=Column(JSON))
    collaboration_patterns: Optional[Dict[str, Any]] = Field(default=None, sa_column=Column(JSON))
    
    # Business insights
    business_value_score: Optional[float] = Field(default=None)
    criticality_score: Optional[float] = Field(default=None)
    optimization_opportunities: Optional[List[str]] = Field(default=None, sa_column=Column(ARRAY(String)))
    
    # Predictive analysis
    predicted_future_usage: Optional[Dict[str, Any]] = Field(default=None, sa_column=Column(JSON))
    trend_direction: Optional[str] = Field(default=None)  # increasing, decreasing, stable
    seasonality_factors: Optional[Dict[str, Any]] = Field(default=None, sa_column=Column(JSON))
    
    # Analysis metadata
    analysis_algorithm: str = Field(index=True)
    analysis_version: str = Field(default="1.0")
    analysis_date: datetime = Field(default_factory=datetime.utcnow)
    
    # Audit fields
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
    
    # Additional metadata
    custom_properties: Optional[Dict[str, Any]] = Field(default=None, sa_column=Column(JSON))
    
    class Config:
        arbitrary_types_allowed = True
    
    __table_args__ = (
        Index('idx_usage_pattern_asset', 'asset_id', 'usage_pattern'),
        Index('idx_usage_pattern_period', 'analysis_period_start', 'analysis_period_end'),
    )

class IntelligenceInsight(SQLModel, table=True):
    """
    Stores AI-generated insights about catalog assets and usage patterns.
    Provides actionable intelligence for data governance and optimization.
    """
    __tablename__ = "intelligence_insights"
    
    id: Optional[int] = Field(default=None, primary_key=True)
    insight_id: str = Field(index=True, unique=True)
    
    # Insight classification
    insight_type: IntelligenceType = Field(index=True)
    insight_category: str = Field(index=True)  # quality, usage, governance, business
    severity_level: str = Field(index=True)  # critical, high, medium, low, info
    
    # Scope and context
    asset_ids: List[str] = Field(default=[], sa_column=Column(ARRAY(String)))
    scope: str = Field(index=True)  # asset, schema, database, organization
    context_description: Optional[str] = Field(default=None, sa_column=Column(Text))
    
    # Insight content
    title: str = Field(index=True)
    description: str = Field(sa_column=Column(Text))
    detailed_analysis: Optional[str] = Field(default=None, sa_column=Column(Text))
    
    # Evidence and supporting data
    supporting_evidence: Dict[str, Any] = Field(default={}, sa_column=Column(JSON))
    data_points: Optional[Dict[str, Any]] = Field(default=None, sa_column=Column(JSON))
    statistical_significance: Optional[float] = Field(default=None)
    
    # Recommendations and actions
    recommended_actions: List[str] = Field(default=[], sa_column=Column(ARRAY(String)))
    action_priority: Optional[str] = Field(default=None)  # immediate, short_term, long_term
    estimated_impact: Optional[str] = Field(default=None)  # high, medium, low
    estimated_effort: Optional[str] = Field(default=None)  # hours, days, weeks
    
    # AI/ML metadata
    ai_model_used: str = Field(index=True)
    model_version: str = Field(default="1.0")
    confidence_score: float = Field(default=0.0)
    processing_time_ms: Optional[int] = Field(default=None)
    
    # Lifecycle and status
    status: str = Field(default="active", index=True)  # active, resolved, dismissed
    resolution_date: Optional[datetime] = Field(default=None)
    resolution_notes: Optional[str] = Field(default=None, sa_column=Column(Text))
    
    # User interaction
    views_count: int = Field(default=0)
    likes_count: int = Field(default=0)
    shares_count: int = Field(default=0)
    implementations_count: int = Field(default=0)
    
    # Audit fields
    generated_at: datetime = Field(default_factory=datetime.utcnow, index=True)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
    expires_at: Optional[datetime] = Field(default=None, index=True)
    
    # Additional metadata
    custom_properties: Optional[Dict[str, Any]] = Field(default=None, sa_column=Column(JSON))
    tags: Optional[List[str]] = Field(default=None, sa_column=Column(ARRAY(String)))
    
    class Config:
        arbitrary_types_allowed = True
    
    __table_args__ = (
        Index('idx_insight_type_category', 'insight_type', 'insight_category'),
        Index('idx_insight_severity_status', 'severity_level', 'status'),
        Index('idx_insight_generated_expires', 'generated_at', 'expires_at'),
    )

# ===================== COLLABORATION INTELLIGENCE MODELS =====================

class CollaborationInsight(SQLModel, table=True):
    """
    Tracks collaboration patterns and provides insights for team optimization.
    Identifies knowledge sharing opportunities and expert connections.
    """
    __tablename__ = "collaboration_insights"
    
    id: Optional[int] = Field(default=None, primary_key=True)
    insight_id: str = Field(index=True, unique=True)
    
    # Collaboration context
    asset_id: str = Field(index=True)
    collaboration_type: str = Field(index=True)  # shared_usage, expert_connection, knowledge_gap
    
    # Participants
    primary_users: List[str] = Field(default=[], sa_column=Column(ARRAY(String)))
    expert_users: List[str] = Field(default=[], sa_column=Column(ARRAY(String)))
    novice_users: List[str] = Field(default=[], sa_column=Column(ARRAY(String)))
    
    # Collaboration metrics
    collaboration_strength: float = Field(default=0.0)
    knowledge_sharing_score: float = Field(default=0.0)
    expertise_distribution: Optional[Dict[str, Any]] = Field(default=None, sa_column=Column(JSON))
    
    # Recommendations
    suggested_connections: List[Dict[str, Any]] = Field(default=[], sa_column=Column(JSON))
    knowledge_sharing_opportunities: List[str] = Field(default=[], sa_column=Column(ARRAY(String)))
    training_recommendations: Optional[Dict[str, Any]] = Field(default=None, sa_column=Column(JSON))
    
    # Analysis metadata
    analysis_period: str = Field(index=True)
    analysis_date: datetime = Field(default_factory=datetime.utcnow)
    confidence_score: float = Field(default=0.0)
    
    # Audit fields
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
    
    class Config:
        arbitrary_types_allowed = True

# ===================== PYDANTIC MODELS FOR API =====================

class SemanticSearchRequest(BaseModel):
    """Request model for semantic search operations"""
    query_text: str
    search_scope: Optional[List[str]] = None  # Asset types to search
    max_results: int = 20
    min_similarity_threshold: float = 0.5
    include_embeddings: bool = False

class RecommendationRequest(BaseModel):
    """Request model for getting recommendations"""
    user_id: str
    context_asset_id: Optional[str] = None
    recommendation_types: Optional[List[RecommendationType]] = None
    max_recommendations: int = 10
    include_explanations: bool = True

class InsightGenerationRequest(BaseModel):
    """Request model for generating insights"""
    asset_ids: Optional[List[str]] = None
    insight_types: Optional[List[IntelligenceType]] = None
    analysis_period_days: int = 30
    include_predictions: bool = True

class IntelligenceResponse(BaseModel):
    """Response model for intelligence operations"""
    insights: List[Dict[str, Any]]
    recommendations: List[Dict[str, Any]]
    semantic_relationships: List[Dict[str, Any]]
    usage_patterns: List[Dict[str, Any]]
    confidence_score: float
    processing_time_ms: int
    metadata: Dict[str, Any]