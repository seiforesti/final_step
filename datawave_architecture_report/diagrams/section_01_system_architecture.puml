@startuml DataWave_System_Architecture_Overview
!theme aws-orange
!define RECTANGLE class

title DataWave Enterprise Data Governance Platform - System Architecture Overview

skinparam backgroundColor #f8f9fa
skinparam defaultFontName "Segoe UI"
skinparam defaultFontSize 11
skinparam roundcorner 10
skinparam shadowing true

' Define colors for different layers
skinparam package {
    BackgroundColor<<presentation>> #e3f2fd
    BorderColor<<presentation>> #1976d2
    BackgroundColor<<api>> #f3e5f5
    BorderColor<<api>> #7b1fa2
    BackgroundColor<<business>> #e8f5e8
    BorderColor<<business>> #388e3c
    BackgroundColor<<data>> #fff3e0
    BorderColor<<data>> #f57c00
    BackgroundColor<<infrastructure>> #fce4ec
    BorderColor<<infrastructure>> #c2185b
}

' Presentation Layer
package "Presentation Layer" <<presentation>> {
    [Next.js Frontend] as frontend
    [React Components] as components
    [Ant Design UI] as ui
    [WebSocket Client] as wsclient
    
    frontend --> components : renders
    components --> ui : uses
    frontend --> wsclient : real-time
}

' API Gateway Layer
package "API Gateway Layer" <<api>> {
    [FastAPI Gateway] as gateway
    [Authentication Middleware] as auth
    [Rate Limiting] as ratelimit
    [CORS Middleware] as cors
    [Request Validation] as validation
    
    gateway --> auth : authenticates
    gateway --> ratelimit : limits
    gateway --> cors : enables
    gateway --> validation : validates
}

' Business Logic Layer
package "Business Logic Layer" <<business>> {
    
    package "Advanced Catalog Domain" {
        [Catalog Service] as catalog_svc
        [Lineage Service] as lineage_svc
        [Quality Service] as quality_svc
        [Semantic Search] as semantic_svc
        
        catalog_svc --> lineage_svc : tracks
        catalog_svc --> quality_svc : assesses
        catalog_svc --> semantic_svc : searches
    }
    
    package "Intelligent Scan Logic Domain" {
        [Scan Coordinator] as scan_coord
        [Scan Intelligence] as scan_intel
        [Performance Optimizer] as perf_opt
        [Workflow Engine] as workflow
        
        scan_coord --> scan_intel : coordinates
        scan_coord --> perf_opt : optimizes
        scan_coord --> workflow : orchestrates
    }
    
    package "RBAC & Governance Domain" {
        [RBAC Service] as rbac_svc
        [Security Service] as security_svc
        [Audit Service] as audit_svc
        [Role Service] as role_svc
        
        rbac_svc --> security_svc : secures
        rbac_svc --> audit_svc : logs
        rbac_svc --> role_svc : manages
    }
    
    package "Compliance Management Domain" {
        [Compliance Service] as compliance_svc
        [Risk Assessment] as risk_svc
        [Framework Integration] as framework_svc
        [Audit Reporting] as audit_report
        
        compliance_svc --> risk_svc : assesses
        compliance_svc --> framework_svc : integrates
        compliance_svc --> audit_report : reports
    }
    
    package "AI/ML Intelligence Domain" {
        [AI Service] as ai_svc
        [ML Service] as ml_svc
        [Pattern Recognition] as pattern_svc
        [Predictive Analytics] as predict_svc
        
        ai_svc --> ml_svc : trains
        ai_svc --> pattern_svc : recognizes
        ai_svc --> predict_svc : predicts
    }
    
    package "Integration & Orchestration Domain" {
        [Integration Service] as integration_svc
        [Data Source Service] as datasource_svc
        [Workflow Orchestrator] as orchestrator
        [Event Streaming] as streaming_svc
        
        integration_svc --> datasource_svc : connects
        integration_svc --> orchestrator : orchestrates
        integration_svc --> streaming_svc : streams
    }
}

' Data Access Layer
package "Data Access Layer" <<data>> {
    [SQLModel ORM] as orm
    [Repository Pattern] as repository
    [Connection Pool] as pool
    [Query Optimizer] as optimizer
    
    orm --> repository : implements
    orm --> pool : manages
    orm --> optimizer : optimizes
}

' Infrastructure Layer
package "Infrastructure Layer" <<infrastructure>> {
    [PostgreSQL Database] as postgres
    [Redis Cache] as redis
    [Docker Containers] as docker
    [Kubernetes Orchestration] as k8s
    [Monitoring Stack] as monitoring
    
    postgres --> redis : caches
    docker --> k8s : orchestrates
    k8s --> monitoring : monitors
}

' Cross-layer connections
frontend --> gateway : HTTP/WebSocket
gateway --> catalog_svc : routes
gateway --> scan_coord : routes
gateway --> rbac_svc : routes
gateway --> compliance_svc : routes
gateway --> ai_svc : routes
gateway --> integration_svc : routes

catalog_svc --> orm : persists
scan_coord --> orm : persists
rbac_svc --> orm : persists
compliance_svc --> orm : persists
ai_svc --> orm : persists
integration_svc --> orm : persists

orm --> postgres : queries
orm --> redis : caches

' External integrations
cloud "External Systems" {
    [Azure Purview] as purview
    [AWS Glue] as glue
    [Databricks] as databricks
    [Snowflake] as snowflake
}

integration_svc --> purview : integrates
integration_svc --> glue : integrates
integration_svc --> databricks : integrates
integration_svc --> snowflake : integrates

note right of frontend : "447 components in\nRacine Main Manager"
note right of catalog_svc : "57,460 bytes\nAdvanced catalog models"
note right of scan_coord : "143,050 bytes\nIntelligent coordinator"
note right of ai_svc : "135,447 bytes\nAdvanced ML service"
note right of integration_svc : "96,038 bytes\nEnterprise integration"

@enduml

@startuml DataWave_Microservices_Topology
!theme aws-orange

title DataWave Microservices Topology & Communication Patterns

skinparam backgroundColor #f8f9fa
skinparam defaultFontName "Segoe UI"
skinparam roundcorner 15
skinparam shadowing true

' Define service categories with colors
skinparam component {
    BackgroundColor<<core>> #e8f5e8
    BorderColor<<core>> #4caf50
    BackgroundColor<<ai>> #e3f2fd
    BorderColor<<ai>> #2196f3
    BackgroundColor<<scan>> #fff3e0
    BorderColor<<scan>> #ff9800
    BackgroundColor<<compliance>> #f3e5f5
    BorderColor<<compliance>> #9c27b0
    BackgroundColor<<integration>> #fce4ec
    BorderColor<<integration>> #e91e63
    BackgroundColor<<analytics>> #e0f2f1
    BorderColor<<analytics>> #009688
}

' Core Services (15 services)
package "Core Services" {
    component [Catalog Service] <<core>>
    component [Classification Service] <<core>>
    component [Security Service] <<core>>
    component [Data Source Service] <<core>>
    component [Lineage Service] <<core>>
    component [Quality Service] <<core>>
    component [Tag Service] <<core>>
    component [User Preference Service] <<core>>
    component [Notification Service] <<core>>
    component [Report Service] <<core>>
    component [Version Service] <<core>>
    component [Backup Service] <<core>>
    component [Validation Service] <<core>>
    component [Storage Service] <<core>>
    component [Resource Service] <<core>>
}

' AI/ML Services (8 services)
package "AI/ML Services" {
    component [Advanced AI Service] <<ai>>
    component [Advanced ML Service] <<ai>>
    component [AI Tuning Service] <<ai>>
    component [Intelligence Service] <<ai>>
    component [Pattern Matching Service] <<ai>>
    component [NLP Service] <<ai>>
    component [Embedding Service] <<ai>>
    component [Model Performance Service] <<ai>>
}

' Scan Services (12 services)
package "Scan Services" {
    component [Scan Coordinator] <<scan>>
    component [Scan Orchestrator] <<scan>>
    component [Scan Intelligence] <<scan>>
    component [Scan Performance] <<scan>>
    component [Scan Workflow] <<scan>>
    component [Scan Scheduler] <<scan>>
    component [Scan Rule Service] <<scan>>
    component [Custom Scan Rules] <<scan>>
    component [Incremental Scan] <<scan>>
    component [Performance Optimizer] <<scan>>
    component [Rule Validation] <<scan>>
    component [Unified Scan Manager] <<scan>>
}

' Compliance Services (7 services)
package "Compliance Services" {
    component [Compliance Service] <<compliance>>
    component [Compliance Rules] <<compliance>>
    component [Risk Assessment] <<compliance>>
    component [Audit Service] <<compliance>>
    component [Framework Integration] <<compliance>>
    component [Compliance Production] <<compliance>>
    component [Approval Service] <<compliance>>
}

' Integration Services (6 services)
package "Integration Services" {
    component [Enterprise Integration] <<integration>>
    component [Data Source Connection] <<integration>>
    component [Integration Providers] <<integration>>
    component [Event Streaming] <<integration>>
    component [Real-time Streaming] <<integration>>
    component [Monitoring Integration] <<integration>>
}

' Analytics Services (5 services)
package "Analytics Services" {
    component [Advanced Analytics] <<analytics>>
    component [Enterprise Analytics] <<analytics>>
    component [Real-time Analytics] <<analytics>>
    component [Comprehensive Analytics] <<analytics>>
    component [Usage Analytics] <<analytics>>
}

' Communication patterns
[Catalog Service] --> [Lineage Service] : tracks lineage
[Catalog Service] --> [Quality Service] : assesses quality
[Classification Service] --> [Advanced AI Service] : AI classification
[Scan Coordinator] --> [Scan Intelligence] : intelligent coordination
[Scan Coordinator] --> [Performance Optimizer] : optimization
[Advanced AI Service] --> [Advanced ML Service] : ML operations
[Compliance Service] --> [Risk Assessment] : risk analysis
[Enterprise Integration] --> [Data Source Connection] : data connectivity
[Advanced Analytics] --> [Real-time Analytics] : real-time processing

' External communication
cloud "Message Queue" {
    [Apache Kafka] as kafka
    [Redis Pub/Sub] as redis_pubsub
}

cloud "External APIs" {
    [REST APIs] as rest
    [GraphQL] as graphql
    [WebSocket] as websocket
}

[Event Streaming] --> kafka : publishes events
[Real-time Streaming] --> redis_pubsub : real-time messages
[Enterprise Integration] --> rest : API calls
[Enterprise Integration] --> websocket : real-time updates

note top of "Core Services" : "15 Core Services\nFoundational functionality"
note top of "AI/ML Services" : "8 AI/ML Services\nIntelligent processing"
note top of "Scan Services" : "12 Scan Services\nData scanning & analysis"
note top of "Compliance Services" : "7 Compliance Services\nRegulatory compliance"
note top of "Integration Services" : "6 Integration Services\nExternal connectivity"
note top of "Analytics Services" : "5 Analytics Services\nData insights & reporting"

@enduml

@startuml DataWave_Data_Flow_Architecture
!theme aws-orange

title DataWave Data Flow & Processing Pipeline Architecture

skinparam backgroundColor #f8f9fa
skinparam defaultFontName "Segoe UI"
skinparam roundcorner 10
skinparam shadowing true

' Define processing stages with colors
skinparam rectangle {
    BackgroundColor<<ingestion>> #e8f5e8
    BorderColor<<ingestion>> #4caf50
    BackgroundColor<<processing>> #e3f2fd
    BorderColor<<processing>> #2196f3
    BackgroundColor<<analysis>> #fff3e0
    BorderColor<<analysis>> #ff9800
    BackgroundColor<<storage>> #f3e5f5
    BorderColor<<storage>> #9c27b0
    BackgroundColor<<output>> #fce4ec
    BorderColor<<output>> #e91e63
}

' Data Sources
cloud "Data Sources" {
    database "PostgreSQL" as pg
    database "MySQL" as mysql
    database "Oracle" as oracle
    database "SQL Server" as sqlserver
    storage "File Systems" as files
    cloud "Cloud Storage" as cloudstorage
    queue "Streaming Data" as streaming
}

' Data Ingestion Layer
rectangle "Data Ingestion Layer" <<ingestion>> {
    [Data Source Connectors] as connectors
    [Schema Discovery] as discovery
    [Connection Pool Manager] as poolmgr
    [Data Validation] as validation
    
    connectors --> discovery : discovers schema
    connectors --> poolmgr : manages connections
    connectors --> validation : validates data
}

' Data Processing Layer
rectangle "Data Processing Layer" <<processing>> {
    [ETL Pipeline] as etl
    [Data Transformation] as transform
    [Data Cleansing] as cleansing
    [Format Conversion] as conversion
    
    etl --> transform : transforms
    etl --> cleansing : cleanses
    etl --> conversion : converts
}

' AI/ML Analysis Layer
rectangle "AI/ML Analysis Layer" <<analysis>> {
    [AI Classification] as ai_classify
    [Pattern Recognition] as patterns
    [Quality Assessment] as quality
    [Anomaly Detection] as anomaly
    [Semantic Analysis] as semantic
    
    ai_classify --> patterns : recognizes patterns
    ai_classify --> quality : assesses quality
    ai_classify --> anomaly : detects anomalies
    ai_classify --> semantic : analyzes semantics
}

' Data Storage Layer
rectangle "Data Storage Layer" <<storage>> {
    [Metadata Repository] as metadata
    [Data Catalog] as catalog
    [Lineage Store] as lineage
    [Quality Metrics] as metrics
    [Audit Logs] as audit
    
    metadata --> catalog : catalogs
    metadata --> lineage : tracks lineage
    metadata --> metrics : stores metrics
    metadata --> audit : logs activities
}

' Output & Integration Layer
rectangle "Output & Integration Layer" <<output>> {
    [API Endpoints] as apis
    [Real-time Streaming] as realtime
    [Report Generation] as reports
    [Dashboard Updates] as dashboards
    [External Integration] as external
    
    apis --> realtime : streams data
    apis --> reports : generates reports
    apis --> dashboards : updates dashboards
    apis --> external : integrates externally
}

' Data flow connections
pg --> connectors : connects
mysql --> connectors : connects
oracle --> connectors : connects
sqlserver --> connectors : connects
files --> connectors : connects
cloudstorage --> connectors : connects
streaming --> connectors : connects

connectors --> etl : ingests data
discovery --> etl : provides schema
validation --> etl : validates

etl --> ai_classify : processes data
transform --> ai_classify : transformed data
cleansing --> ai_classify : clean data

ai_classify --> metadata : stores results
patterns --> metadata : pattern data
quality --> metadata : quality data
anomaly --> metadata : anomaly data
semantic --> metadata : semantic data

metadata --> apis : serves data
catalog --> apis : catalog data
lineage --> apis : lineage data
metrics --> apis : metrics data

' Real-time processing path
streaming --> realtime : real-time data
realtime --> dashboards : live updates

' Feedback loops
quality --> cleansing : quality feedback
anomaly --> validation : anomaly feedback
patterns --> discovery : pattern feedback

' External systems
cloud "External Systems" {
    [Azure Purview] as purview
    [AWS Glue] as glue
    [Databricks] as databricks
    [Business Intelligence] as bi
}

external --> purview : syncs metadata
external --> glue : data catalog sync
external --> databricks : ML model sync
external --> bi : analytics data

' Performance metrics
note right of connectors : "141,472 bytes\nData source connection service"
note right of ai_classify : "135,447 bytes\nAdvanced ML service"
note right of metadata : "57,460 bytes\nAdvanced catalog models"
note right of apis : "80+ API route files\nComprehensive coverage"

' Processing volumes
note bottom of etl : "Processes TB-scale\ndaily data volumes"
note bottom of ai_classify : "AI-powered classification\nwith 95%+ accuracy"
note bottom of realtime : "Sub-second latency\nfor real-time updates"

@enduml

@startuml DataWave_Security_Architecture
!theme aws-orange

title DataWave Security Architecture & Zero-Trust Model

skinparam backgroundColor #f8f9fa
skinparam defaultFontName "Segoe UI"
skinparam roundcorner 10
skinparam shadowing true

' Security zones with colors
skinparam package {
    BackgroundColor<<dmz>> #ffebee
    BorderColor<<dmz>> #f44336
    BackgroundColor<<trusted>> #e8f5e8
    BorderColor<<trusted>> #4caf50
    BackgroundColor<<secure>> #e3f2fd
    BorderColor<<secure>> #2196f3
    BackgroundColor<<restricted>> #fff3e0
    BorderColor<<restricted>> #ff9800
}

' External Zone (DMZ)
package "External Zone (DMZ)" <<dmz>> {
    [Load Balancer] as lb
    [WAF (Web Application Firewall)] as waf
    [DDoS Protection] as ddos
    [SSL/TLS Termination] as ssl
    
    lb --> waf : filters requests
    waf --> ddos : protects from attacks
    waf --> ssl : terminates SSL
}

' Authentication & Authorization Zone
package "Authentication & Authorization Zone" <<trusted>> {
    [OAuth 2.0 Provider] as oauth
    [SAML Identity Provider] as saml
    [Multi-Factor Authentication] as mfa
    [JWT Token Service] as jwt
    [Session Management] as session
    
    oauth --> mfa : requires MFA
    saml --> mfa : requires MFA
    oauth --> jwt : issues tokens
    jwt --> session : manages sessions
}

' Application Security Zone
package "Application Security Zone" <<secure>> {
    [API Gateway] as gateway
    [Rate Limiting] as ratelimit
    [Request Validation] as validation
    [RBAC Engine] as rbac
    [Audit Logger] as audit
    
    gateway --> ratelimit : limits requests
    gateway --> validation : validates input
    gateway --> rbac : enforces permissions
    gateway --> audit : logs activities
}

' Data Security Zone
package "Data Security Zone" <<restricted>> {
    [Encryption Service] as encryption
    [Key Management] as keymanagement
    [Data Masking] as masking
    [Access Control] as accesscontrol
    [Compliance Monitor] as compliance
    
    encryption --> keymanagement : manages keys
    encryption --> masking : masks sensitive data
    accesscontrol --> compliance : monitors compliance
}

' Security services
actor "External User" as user
actor "Internal User" as internal
actor "Service Account" as service

' Authentication flow
user --> lb : HTTPS request
lb --> oauth : authenticates
oauth --> mfa : requires MFA
mfa --> jwt : issues token

internal --> saml : SSO login
saml --> mfa : requires MFA
mfa --> jwt : issues token

service --> oauth : client credentials
oauth --> jwt : issues service token

' Authorization flow
jwt --> gateway : authorized request
gateway --> rbac : checks permissions
rbac --> accesscontrol : enforces access

' Data protection flow
accesscontrol --> encryption : encrypts data
encryption --> masking : masks PII
masking --> compliance : ensures compliance

' Security monitoring
[Security Information and Event Management (SIEM)] as siem
[Intrusion Detection System (IDS)] as ids
[Vulnerability Scanner] as vuln
[Security Orchestration] as orchestration

audit --> siem : security events
gateway --> ids : monitors traffic
encryption --> vuln : scans vulnerabilities
siem --> orchestration : orchestrates response

' Compliance frameworks
package "Compliance Frameworks" {
    [GDPR Compliance] as gdpr
    [HIPAA Compliance] as hipaa
    [SOX Compliance] as sox
    [PCI DSS Compliance] as pci
    [ISO 27001] as iso
}

compliance --> gdpr : ensures GDPR
compliance --> hipaa : ensures HIPAA
compliance --> sox : ensures SOX
compliance --> pci : ensures PCI DSS
compliance --> iso : ensures ISO 27001

' Zero-trust principles
note top of oauth : "Zero-Trust Principle:\nNever trust, always verify"
note top of rbac : "Least Privilege Access:\nMinimal required permissions"
note top of encryption : "Defense in Depth:\nMultiple security layers"
note top of audit : "Continuous Monitoring:\nReal-time security events"

' Security metrics
note bottom of mfa : "99.9% MFA adoption\nEnterprise-wide"
note bottom of encryption : "AES-256 encryption\nEnd-to-end security"
note bottom of audit : "100% audit coverage\nAll user activities"
note bottom of compliance : "7 compliance frameworks\nAutomated monitoring"

@enduml

@startuml DataWave_Deployment_Architecture
!theme aws-orange

title DataWave Deployment Architecture & Infrastructure

skinparam backgroundColor #f8f9fa
skinparam defaultFontName "Segoe UI"
skinparam roundcorner 10
skinparam shadowing true

' Infrastructure layers
skinparam cloud {
    BackgroundColor<<cloud>> #e3f2fd
    BorderColor<<cloud>> #1976d2
}

skinparam node {
    BackgroundColor<<k8s>> #e8f5e8
    BorderColor<<k8s>> #388e3c
    BackgroundColor<<docker>> #fff3e0
    BorderColor<<docker>> #f57c00
    BackgroundColor<<db>> #f3e5f5
    BorderColor<<db>> #7b1fa2
}

' Cloud Infrastructure
cloud "Cloud Infrastructure" <<cloud>> {
    node "Kubernetes Cluster" <<k8s>> {
        
        ' Frontend Deployment
        package "Frontend Tier" {
            node "Next.js Pods" <<docker>> {
                [Next.js App 1] as nextjs1
                [Next.js App 2] as nextjs2
                [Next.js App 3] as nextjs3
            }
            [Frontend Load Balancer] as fe_lb
            fe_lb --> nextjs1
            fe_lb --> nextjs2
            fe_lb --> nextjs3
        }
        
        ' API Gateway Tier
        package "API Gateway Tier" {
            node "Gateway Pods" <<docker>> {
                [FastAPI Gateway 1] as gateway1
                [FastAPI Gateway 2] as gateway2
                [FastAPI Gateway 3] as gateway3
            }
            [API Load Balancer] as api_lb
            api_lb --> gateway1
            api_lb --> gateway2
            api_lb --> gateway3
        }
        
        ' Microservices Tier
        package "Microservices Tier" {
            
            node "Catalog Services" <<docker>> {
                [Catalog Service Pod 1] as cat1
                [Catalog Service Pod 2] as cat2
                [Lineage Service Pod] as lineage
                [Quality Service Pod] as quality
            }
            
            node "Scan Services" <<docker>> {
                [Scan Coordinator Pod 1] as scan1
                [Scan Coordinator Pod 2] as scan2
                [Scan Intelligence Pod] as intel
                [Performance Optimizer Pod] as perf
            }
            
            node "AI/ML Services" <<docker>> {
                [AI Service Pod 1] as ai1
                [AI Service Pod 2] as ai2
                [ML Service Pod] as ml
                [Pattern Recognition Pod] as pattern
            }
            
            node "Compliance Services" <<docker>> {
                [Compliance Service Pod] as comp
                [Risk Assessment Pod] as risk
                [Audit Service Pod] as audit_pod
            }
            
            node "Integration Services" <<docker>> {
                [Integration Service Pod] as integ
                [Data Source Service Pod] as ds
                [Streaming Service Pod] as stream
            }
        }
        
        ' Data Tier
        package "Data Tier" {
            node "Database Cluster" <<db>> {
                [PostgreSQL Primary] as pg_primary
                [PostgreSQL Replica 1] as pg_replica1
                [PostgreSQL Replica 2] as pg_replica2
            }
            
            node "Cache Cluster" <<db>> {
                [Redis Master] as redis_master
                [Redis Replica 1] as redis_replica1
                [Redis Replica 2] as redis_replica2
            }
            
            pg_primary --> pg_replica1 : replication
            pg_primary --> pg_replica2 : replication
            redis_master --> redis_replica1 : replication
            redis_master --> redis_replica2 : replication
        }
    }
    
    ' External services
    [Content Delivery Network (CDN)] as cdn
    [External Load Balancer] as ext_lb
    [DNS Service] as dns
    [Certificate Manager] as cert
    
    dns --> ext_lb : routes traffic
    ext_lb --> cdn : static content
    ext_lb --> fe_lb : dynamic content
    cert --> ext_lb : SSL certificates
}

' Monitoring & Observability
cloud "Monitoring Stack" {
    [Prometheus] as prometheus
    [Grafana] as grafana
    [Elasticsearch] as elastic
    [Kibana] as kibana
    [Jaeger] as jaeger
    
    prometheus --> grafana : metrics visualization
    elastic --> kibana : log visualization
    jaeger --> grafana : tracing visualization
}

' CI/CD Pipeline
cloud "CI/CD Infrastructure" {
    [Git Repository] as git
    [CI/CD Pipeline] as cicd
    [Container Registry] as registry
    [Helm Charts] as helm
    
    git --> cicd : triggers build
    cicd --> registry : pushes images
    cicd --> helm : deploys charts
    helm --> "Kubernetes Cluster" : deploys services
}

' Service connections
fe_lb --> api_lb : API calls
api_lb --> cat1 : routes requests
api_lb --> scan1 : routes requests
api_lb --> ai1 : routes requests
api_lb --> comp : routes requests
api_lb --> integ : routes requests

cat1 --> pg_primary : database queries
scan1 --> pg_primary : database queries
ai1 --> pg_primary : database queries
comp --> pg_primary : database queries
integ --> pg_primary : database queries

cat1 --> redis_master : cache operations
scan1 --> redis_master : cache operations
ai1 --> redis_master : cache operations

' Monitoring connections
"Kubernetes Cluster" --> prometheus : metrics
"Kubernetes Cluster" --> elastic : logs
"Kubernetes Cluster" --> jaeger : traces

' Scaling annotations
note right of nextjs1 : "Auto-scaling: 3-10 pods\nCPU threshold: 70%"
note right of gateway1 : "Auto-scaling: 3-15 pods\nMemory threshold: 80%"
note right of cat1 : "Auto-scaling: 2-8 pods\nRequest rate based"
note right of scan1 : "Auto-scaling: 2-12 pods\nQueue length based"
note right of ai1 : "Auto-scaling: 2-6 pods\nGPU utilization based"

' Performance metrics
note bottom of pg_primary : "PostgreSQL Cluster\n- Primary + 2 Replicas\n- 99.99% uptime\n- Sub-10ms query latency"
note bottom of redis_master : "Redis Cluster\n- Master + 2 Replicas\n- 1M+ ops/sec\n- <1ms latency"

' Infrastructure specifications
note top of "Kubernetes Cluster" : "Kubernetes Infrastructure\n- 50+ nodes\n- 1000+ pods capacity\n- Multi-AZ deployment\n- Auto-scaling enabled"

@enduml
